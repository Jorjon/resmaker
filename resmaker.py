import os
import argparse
import sys
'''
Created on Sep 2, 2011

@author: Jorjon
'''

def parseFile(path):
    base = os.path.splitext(path)[0]
    ext = os.path.splitext(path)[1][1:]
    return base.replace('../','___').replace('/', '__').replace('.', '_') + '_' + ext    

def createEmbed(path):
    global args
    base = os.path.splitext(os.path.split(path)[1])[0].lower()
    ext = os.path.splitext(path)[1][1:].lower()
    options = ""
    if ext == "ttf" and not args.disableFonts:
        options = ', fontName = "' + base + '"' + (', embedAsCFF="false"' if not args.disableEmbed else '')
    elif ext == "png" or ext == "jpg" or ext == "jpeg":
        options = ''
    else:
        options = ', mimeType = "application/octet-stream"'
    return '[Embed(source = "' + path + '"' + options + ')] static public const ' + parseFile(path if args.fullPath else base + "." + ext) + ":Class;"

def parseFolder(folder):
    global ident
    files = sorted([d for d in os.listdir(folder) if os.path.isdir(folder + os.path.sep + d)])
    files.extend(sorted([f for f in os.listdir(folder) if os.path.isfile(folder + os.path.sep + f)]))
    folder = folder.rstrip('/').rstrip('\\')
    base = os.path.splitext(os.path.split(folder)[1])[0].lower()
    ident += 2
    fileOut.write("\t\t// " + "-" * ident + " [" + base + "] " + "-" * ident + "\n")
    for fname in files:
        fullPath =folder + os.sep + fname
        if os.path.isdir(fullPath):
            parseFolder(fullPath)
        else:
            relPath = os.path.relpath(os.path.split(fullPath)[0], os.path.split(fileResources)[0])
            relPath = relPath.replace( '\\' , '/')
            fileOut.write('\t\t' + createEmbed(relPath + "/" + fname) + "\n")
    fileOut.write("\n")
    ident -= 2
    
parser = argparse.ArgumentParser(description='Generates Resources.as file')
parser.add_argument('folders', help='List of folders that you want to include. It will include sub-folders.')
parser.add_argument('-o', metavar='output', help='Location of the file to create. Beware that files for embedding will be relative to this location. Defaults to Resources.as.', default="Resources.as")
parser.add_argument('--disableFonts', metavar='', action="store_const", default=False, const=True, help='Disable font processing.')
parser.add_argument('--disableEmbed', metavar='', action="store_const", default=False, const=True, help='Don\'t add embedAsCFF="false" for fonts')
parser.add_argument('--fullPath', metavar='', action="store_const", default=False, const=True, help='Translate full path into Class name.')
#args = parser.parse_args('c:\Projects\LD22\img\,c:\Projects\LD22\lib\,c:\Projects\LD22\sounds\ -o c:\Projects\LD22\src\com\Resources.as'.split())
args = parser.parse_args()

ident = 0;
paths = args.folders.split(',')
if os.path.isfile(paths[0]):
    print(createEmbed(paths[0]))
    os.system('pause')
    sys.exit()
fileResources = args.o
fileOut = open(fileResources, "w")
fileOut.write("package {\n"
              "\t/**\n"
              "\t * This file was automatically generated by Jorjon Framework's Resource File Generator.\n"
              "\t * It contains all resources of the game.\n"
              "\t * @author Jorjon\n"
              "\t */\n"
              "\tpublic class Resources {\n"
              "\n")
for folder in paths:
    parseFolder(folder)
fileOut.write("\t}\n"
              "}")
fileOut.close()